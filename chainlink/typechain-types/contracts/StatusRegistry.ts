/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type StatusStateStruct = {
  time: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<string>;
};

export type StatusStateStructOutput = [BigNumber, string] & {
  time: BigNumber;
  status: string;
};

export interface StatusRegistryInterface extends utils.Interface {
  functions: {
    "INVALID_ISSUER_ID()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addIssuer(uint8,string)": FunctionFragment;
    "checkValidity((uint64,string),(uint64,string))": FunctionFragment;
    "donId()": FunctionFragment;
    "getIssuerUrl(uint8)": FunctionFragment;
    "getSource()": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "issuerRequestIds(bytes32)": FunctionFragment;
    "issuerStatuses(uint8)": FunctionFragment;
    "issuerUrls(uint8)": FunctionFragment;
    "lastError()": FunctionFragment;
    "lastRequestId()": FunctionFragment;
    "lastResponse()": FunctionFragment;
    "owner()": FunctionFragment;
    "requestStatus(uint8,uint64,uint32)": FunctionFragment;
    "sendRequest(string,uint8,bytes,string[],bytes[],uint64,uint32)": FunctionFragment;
    "setDonId(bytes32)": FunctionFragment;
    "setSource(string)": FunctionFragment;
    "source()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_ISSUER_ID"
      | "acceptOwnership"
      | "addIssuer"
      | "checkValidity"
      | "donId"
      | "getIssuerUrl"
      | "getSource"
      | "handleOracleFulfillment"
      | "issuerRequestIds"
      | "issuerStatuses"
      | "issuerUrls"
      | "lastError"
      | "lastRequestId"
      | "lastResponse"
      | "owner"
      | "requestStatus"
      | "sendRequest"
      | "setDonId"
      | "setSource"
      | "source"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_ISSUER_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkValidity",
    values: [StatusStateStruct, StatusStateStruct]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIssuerUrl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getSource", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerRequestIds",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerStatuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerUrls",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "lastError", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSource",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "source", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "INVALID_ISSUER_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSource", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuerRequestIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuerStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuerUrls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastError", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDonId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSource", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "source", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
    "ResponseReceived(bytes32,bytes,bytes)": EventFragment;
    "StatusUpdated(uint8,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResponseReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusUpdated"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface ResponseReceivedEventObject {
  requestId: string;
  response: string;
  error: string;
}
export type ResponseReceivedEvent = TypedEvent<
  [string, string, string],
  ResponseReceivedEventObject
>;

export type ResponseReceivedEventFilter =
  TypedEventFilter<ResponseReceivedEvent>;

export interface StatusUpdatedEventObject {
  issuerId: number;
  status: StatusStateStructOutput;
}
export type StatusUpdatedEvent = TypedEvent<
  [number, StatusStateStructOutput],
  StatusUpdatedEventObject
>;

export type StatusUpdatedEventFilter = TypedEventFilter<StatusUpdatedEvent>;

export interface StatusRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StatusRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkValidity(
      lastStatusState: StatusStateStruct,
      newStatusState: StatusStateStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    donId(overrides?: CallOverrides): Promise<[string]>;

    getIssuerUrl(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSource(overrides?: CallOverrides): Promise<[string]>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issuerRequestIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    issuerStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { time: BigNumber; status: string }>;

    issuerUrls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastError(overrides?: CallOverrides): Promise<[string]>;

    lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    lastResponse(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    source(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addIssuer(
    issuerId: PromiseOrValue<BigNumberish>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkValidity(
    lastStatusState: StatusStateStruct,
    newStatusState: StatusStateStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  donId(overrides?: CallOverrides): Promise<string>;

  getIssuerUrl(
    issuerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSource(overrides?: CallOverrides): Promise<string>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issuerRequestIds(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  issuerStatuses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { time: BigNumber; status: string }>;

  issuerUrls(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lastError(overrides?: CallOverrides): Promise<string>;

  lastRequestId(overrides?: CallOverrides): Promise<string>;

  lastResponse(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  requestStatus(
    issuerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequest(
    _source: PromiseOrValue<string>,
    secretsLocation: PromiseOrValue<BigNumberish>,
    encryptedSecretsReference: PromiseOrValue<BytesLike>,
    args: PromiseOrValue<string>[],
    bytesArgs: PromiseOrValue<BytesLike>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonId(
    newDonId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSource(
    _source: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  source(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkValidity(
      lastStatusState: StatusStateStruct,
      newStatusState: StatusStateStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    donId(overrides?: CallOverrides): Promise<string>;

    getIssuerUrl(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSource(overrides?: CallOverrides): Promise<string>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    issuerRequestIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    issuerStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { time: BigNumber; status: string }>;

    issuerUrls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lastError(overrides?: CallOverrides): Promise<string>;

    lastRequestId(overrides?: CallOverrides): Promise<string>;

    lastResponse(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    source(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;

    "ResponseReceived(bytes32,bytes,bytes)"(
      requestId?: null,
      response?: null,
      error?: null
    ): ResponseReceivedEventFilter;
    ResponseReceived(
      requestId?: null,
      response?: null,
      error?: null
    ): ResponseReceivedEventFilter;

    "StatusUpdated(uint8,tuple)"(
      issuerId?: null,
      status?: null
    ): StatusUpdatedEventFilter;
    StatusUpdated(issuerId?: null, status?: null): StatusUpdatedEventFilter;
  };

  estimateGas: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkValidity(
      lastStatusState: StatusStateStruct,
      newStatusState: StatusStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donId(overrides?: CallOverrides): Promise<BigNumber>;

    getIssuerUrl(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSource(overrides?: CallOverrides): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issuerRequestIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuerStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuerUrls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastError(overrides?: CallOverrides): Promise<BigNumber>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    lastResponse(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    source(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkValidity(
      lastStatusState: StatusStateStruct,
      newStatusState: StatusStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIssuerUrl(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issuerRequestIds(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuerStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuerUrls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastResponse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    source(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
