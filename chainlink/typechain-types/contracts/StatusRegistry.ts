/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type BSLStatusStruct = {
  time: PromiseOrValue<BigNumberish>;
  status: PromiseOrValue<BigNumberish>;
};

export type BSLStatusStructOutput = [BigNumber, BigNumber] & {
  time: BigNumber;
  status: BigNumber;
};

export type IssuerStruct = {
  url: PromiseOrValue<string>;
  statusMechanism: PromiseOrValue<BigNumberish>;
};

export type IssuerStructOutput = [string, number] & {
  url: string;
  statusMechanism: number;
};

export interface StatusRegistryInterface extends utils.Interface {
  functions: {
    "INVALID_ISSUER_ID()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addIssuer(uint8,string,uint8)": FunctionFragment;
    "bslIssuanceStatuses(uint8)": FunctionFragment;
    "bslRevocationStatuses(uint8)": FunctionFragment;
    "checkBSLStatusValidity((uint64,uint64),(uint64,uint64))": FunctionFragment;
    "donId()": FunctionFragment;
    "getBSLStatus(uint8,uint8)": FunctionFragment;
    "getIssuer(uint8)": FunctionFragment;
    "getSource()": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "issuers(uint8)": FunctionFragment;
    "lastError()": FunctionFragment;
    "lastRequestId()": FunctionFragment;
    "lastResponse()": FunctionFragment;
    "owner()": FunctionFragment;
    "requestStatus(uint8,uint8,uint64,uint32)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "sendRequest(string,uint8,bytes,string[],bytes[],uint64,uint32)": FunctionFragment;
    "setBSLStatus(uint8,uint8,(uint64,uint64))": FunctionFragment;
    "setDonId(bytes32)": FunctionFragment;
    "setSource(string)": FunctionFragment;
    "source()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_ISSUER_ID"
      | "acceptOwnership"
      | "addIssuer"
      | "bslIssuanceStatuses"
      | "bslRevocationStatuses"
      | "checkBSLStatusValidity"
      | "donId"
      | "getBSLStatus"
      | "getIssuer"
      | "getSource"
      | "handleOracleFulfillment"
      | "issuers"
      | "lastError"
      | "lastRequestId"
      | "lastResponse"
      | "owner"
      | "requestStatus"
      | "requests"
      | "sendRequest"
      | "setBSLStatus"
      | "setDonId"
      | "setSource"
      | "source"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_ISSUER_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bslIssuanceStatuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bslRevocationStatuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBSLStatusValidity",
    values: [BSLStatusStruct, BSLStatusStruct]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBSLStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getSource", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "lastError", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBSLStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      BSLStatusStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSource",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "source", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "INVALID_ISSUER_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bslIssuanceStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bslRevocationStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBSLStatusValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBSLStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSource", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastError", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBSLStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDonId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSource", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "source", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
    "ResponseReceived(bytes32,bytes,bytes)": EventFragment;
    "StatusUpdated(uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResponseReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatusUpdated"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface ResponseReceivedEventObject {
  requestId: string;
  response: string;
  error: string;
}
export type ResponseReceivedEvent = TypedEvent<
  [string, string, string],
  ResponseReceivedEventObject
>;

export type ResponseReceivedEventFilter =
  TypedEventFilter<ResponseReceivedEvent>;

export interface StatusUpdatedEventObject {
  issuerId: number;
  statusType: number;
}
export type StatusUpdatedEvent = TypedEvent<
  [number, number],
  StatusUpdatedEventObject
>;

export type StatusUpdatedEventFilter = TypedEventFilter<StatusUpdatedEvent>;

export interface StatusRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StatusRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      statusMechanism: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bslIssuanceStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

    bslRevocationStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

    checkBSLStatusValidity(
      lastStatusState: BSLStatusStruct,
      newStatusState: BSLStatusStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    donId(overrides?: CallOverrides): Promise<[string]>;

    getBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BSLStatusStructOutput]>;

    getIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IssuerStructOutput]>;

    getSource(overrides?: CallOverrides): Promise<[string]>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { url: string; statusMechanism: number }>;

    lastError(overrides?: CallOverrides): Promise<[string]>;

    lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    lastResponse(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        issuerId: number;
        statusType: number;
        statusMechanism: number;
      }
    >;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      status: BSLStatusStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    source(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addIssuer(
    issuerId: PromiseOrValue<BigNumberish>,
    url: PromiseOrValue<string>,
    statusMechanism: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bslIssuanceStatuses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

  bslRevocationStatuses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

  checkBSLStatusValidity(
    lastStatusState: BSLStatusStruct,
    newStatusState: BSLStatusStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  donId(overrides?: CallOverrides): Promise<string>;

  getBSLStatus(
    issuerId: PromiseOrValue<BigNumberish>,
    statusType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BSLStatusStructOutput>;

  getIssuer(
    issuerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IssuerStructOutput>;

  getSource(overrides?: CallOverrides): Promise<string>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issuers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { url: string; statusMechanism: number }>;

  lastError(overrides?: CallOverrides): Promise<string>;

  lastRequestId(overrides?: CallOverrides): Promise<string>;

  lastResponse(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  requestStatus(
    issuerId: PromiseOrValue<BigNumberish>,
    statusType: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      issuerId: number;
      statusType: number;
      statusMechanism: number;
    }
  >;

  sendRequest(
    _source: PromiseOrValue<string>,
    secretsLocation: PromiseOrValue<BigNumberish>,
    encryptedSecretsReference: PromiseOrValue<BytesLike>,
    args: PromiseOrValue<string>[],
    bytesArgs: PromiseOrValue<BytesLike>[],
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBSLStatus(
    issuerId: PromiseOrValue<BigNumberish>,
    statusType: PromiseOrValue<BigNumberish>,
    status: BSLStatusStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonId(
    newDonId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSource(
    _source: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  source(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      statusMechanism: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bslIssuanceStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

    bslRevocationStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { time: BigNumber; status: BigNumber }>;

    checkBSLStatusValidity(
      lastStatusState: BSLStatusStruct,
      newStatusState: BSLStatusStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    donId(overrides?: CallOverrides): Promise<string>;

    getBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BSLStatusStructOutput>;

    getIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IssuerStructOutput>;

    getSource(overrides?: CallOverrides): Promise<string>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    issuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { url: string; statusMechanism: number }>;

    lastError(overrides?: CallOverrides): Promise<string>;

    lastRequestId(overrides?: CallOverrides): Promise<string>;

    lastResponse(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        issuerId: number;
        statusType: number;
        statusMechanism: number;
      }
    >;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      status: BSLStatusStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    source(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;

    "ResponseReceived(bytes32,bytes,bytes)"(
      requestId?: null,
      response?: null,
      error?: null
    ): ResponseReceivedEventFilter;
    ResponseReceived(
      requestId?: null,
      response?: null,
      error?: null
    ): ResponseReceivedEventFilter;

    "StatusUpdated(uint8,uint8)"(
      issuerId?: null,
      statusType?: null
    ): StatusUpdatedEventFilter;
    StatusUpdated(issuerId?: null, statusType?: null): StatusUpdatedEventFilter;
  };

  estimateGas: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      statusMechanism: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bslIssuanceStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bslRevocationStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkBSLStatusValidity(
      lastStatusState: BSLStatusStruct,
      newStatusState: BSLStatusStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donId(overrides?: CallOverrides): Promise<BigNumber>;

    getBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSource(overrides?: CallOverrides): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastError(overrides?: CallOverrides): Promise<BigNumber>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    lastResponse(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      status: BSLStatusStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    source(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_ISSUER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      statusMechanism: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bslIssuanceStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bslRevocationStatuses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBSLStatusValidity(
      lastStatusState: BSLStatusStruct,
      newStatusState: BSLStatusStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuer(
      issuerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issuers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastResponse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendRequest(
      _source: PromiseOrValue<string>,
      secretsLocation: PromiseOrValue<BigNumberish>,
      encryptedSecretsReference: PromiseOrValue<BytesLike>,
      args: PromiseOrValue<string>[],
      bytesArgs: PromiseOrValue<BytesLike>[],
      subscriptionId: PromiseOrValue<BigNumberish>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBSLStatus(
      issuerId: PromiseOrValue<BigNumberish>,
      statusType: PromiseOrValue<BigNumberish>,
      status: BSLStatusStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSource(
      _source: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    source(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
