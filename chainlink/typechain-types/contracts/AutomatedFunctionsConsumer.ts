/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AutomatedFunctionsConsumerInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "donId()": FunctionFragment;
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "s_fulfillGasLimit()": FunctionFragment;
    "s_lastError()": FunctionFragment;
    "s_lastRequestId()": FunctionFragment;
    "s_lastResponse()": FunctionFragment;
    "s_lastUpkeepTimeStamp()": FunctionFragment;
    "s_requestCBOR()": FunctionFragment;
    "s_requestCounter()": FunctionFragment;
    "s_responseCounter()": FunctionFragment;
    "s_subscriptionId()": FunctionFragment;
    "s_updateInterval()": FunctionFragment;
    "s_upkeepCounter()": FunctionFragment;
    "setDonId(bytes32)": FunctionFragment;
    "setRequest(uint64,uint32,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "checkUpkeep"
      | "donId"
      | "handleOracleFulfillment"
      | "owner"
      | "performUpkeep"
      | "s_fulfillGasLimit"
      | "s_lastError"
      | "s_lastRequestId"
      | "s_lastResponse"
      | "s_lastUpkeepTimeStamp"
      | "s_requestCBOR"
      | "s_requestCounter"
      | "s_responseCounter"
      | "s_subscriptionId"
      | "s_updateInterval"
      | "s_upkeepCounter"
      | "setDonId"
      | "setRequest"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "donId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_fulfillGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastUpkeepTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestCBOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_responseCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_updateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_upkeepCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDonId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_fulfillGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastUpkeepTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestCBOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_responseCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_updateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_upkeepCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDonId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OCRResponse(bytes32,bytes,bytes)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestRevertedWithErrorMsg(string)": EventFragment;
    "RequestRevertedWithoutErrorMsg(bytes)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OCRResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestRevertedWithErrorMsg"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestRevertedWithoutErrorMsg"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface OCRResponseEventObject {
  requestId: string;
  result: string;
  err: string;
}
export type OCRResponseEvent = TypedEvent<
  [string, string, string],
  OCRResponseEventObject
>;

export type OCRResponseEventFilter = TypedEventFilter<OCRResponseEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestFulfilledEventObject {
  id: string;
}
export type RequestFulfilledEvent = TypedEvent<
  [string],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestRevertedWithErrorMsgEventObject {
  reason: string;
}
export type RequestRevertedWithErrorMsgEvent = TypedEvent<
  [string],
  RequestRevertedWithErrorMsgEventObject
>;

export type RequestRevertedWithErrorMsgEventFilter =
  TypedEventFilter<RequestRevertedWithErrorMsgEvent>;

export interface RequestRevertedWithoutErrorMsgEventObject {
  data: string;
}
export type RequestRevertedWithoutErrorMsgEvent = TypedEvent<
  [string],
  RequestRevertedWithoutErrorMsgEventObject
>;

export type RequestRevertedWithoutErrorMsgEventFilter =
  TypedEventFilter<RequestRevertedWithoutErrorMsgEvent>;

export interface RequestSentEventObject {
  id: string;
}
export type RequestSentEvent = TypedEvent<[string], RequestSentEventObject>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface AutomatedFunctionsConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AutomatedFunctionsConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    donId(overrides?: CallOverrides): Promise<[string]>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_fulfillGasLimit(overrides?: CallOverrides): Promise<[number]>;

    s_lastError(overrides?: CallOverrides): Promise<[string]>;

    s_lastRequestId(overrides?: CallOverrides): Promise<[string]>;

    s_lastResponse(overrides?: CallOverrides): Promise<[string]>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_requestCBOR(overrides?: CallOverrides): Promise<[string]>;

    s_requestCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_responseCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_updateInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequest(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _fulfillGasLimit: PromiseOrValue<BigNumberish>,
      _updateInterval: PromiseOrValue<BigNumberish>,
      requestCBOR: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

  donId(overrides?: CallOverrides): Promise<string>;

  handleOracleFulfillment(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_fulfillGasLimit(overrides?: CallOverrides): Promise<number>;

  s_lastError(overrides?: CallOverrides): Promise<string>;

  s_lastRequestId(overrides?: CallOverrides): Promise<string>;

  s_lastResponse(overrides?: CallOverrides): Promise<string>;

  s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  s_requestCBOR(overrides?: CallOverrides): Promise<string>;

  s_requestCounter(overrides?: CallOverrides): Promise<BigNumber>;

  s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

  s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

  s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

  setDonId(
    newDonId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequest(
    _subscriptionId: PromiseOrValue<BigNumberish>,
    _fulfillGasLimit: PromiseOrValue<BigNumberish>,
    _updateInterval: PromiseOrValue<BigNumberish>,
    requestCBOR: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    donId(overrides?: CallOverrides): Promise<string>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    s_fulfillGasLimit(overrides?: CallOverrides): Promise<number>;

    s_lastError(overrides?: CallOverrides): Promise<string>;

    s_lastRequestId(overrides?: CallOverrides): Promise<string>;

    s_lastResponse(overrides?: CallOverrides): Promise<string>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_requestCBOR(overrides?: CallOverrides): Promise<string>;

    s_requestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequest(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _fulfillGasLimit: PromiseOrValue<BigNumberish>,
      _updateInterval: PromiseOrValue<BigNumberish>,
      requestCBOR: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OCRResponse(bytes32,bytes,bytes)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;
    OCRResponse(
      requestId?: PromiseOrValue<BytesLike> | null,
      result?: null,
      err?: null
    ): OCRResponseEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestFulfilledEventFilter;

    "RequestRevertedWithErrorMsg(string)"(
      reason?: null
    ): RequestRevertedWithErrorMsgEventFilter;
    RequestRevertedWithErrorMsg(
      reason?: null
    ): RequestRevertedWithErrorMsgEventFilter;

    "RequestRevertedWithoutErrorMsg(bytes)"(
      data?: null
    ): RequestRevertedWithoutErrorMsgEventFilter;
    RequestRevertedWithoutErrorMsg(
      data?: null
    ): RequestRevertedWithoutErrorMsgEventFilter;

    "RequestSent(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): RequestSentEventFilter;
    RequestSent(id?: PromiseOrValue<BytesLike> | null): RequestSentEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donId(overrides?: CallOverrides): Promise<BigNumber>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_fulfillGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastError(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastResponse(overrides?: CallOverrides): Promise<BigNumber>;

    s_lastUpkeepTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    s_requestCBOR(overrides?: CallOverrides): Promise<BigNumber>;

    s_requestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_responseCounter(overrides?: CallOverrides): Promise<BigNumber>;

    s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    s_updateInterval(overrides?: CallOverrides): Promise<BigNumber>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<BigNumber>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequest(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _fulfillGasLimit: PromiseOrValue<BigNumberish>,
      _updateInterval: PromiseOrValue<BigNumberish>,
      requestCBOR: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleOracleFulfillment(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_fulfillGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastResponse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_lastUpkeepTimeStamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_requestCBOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_requestCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_responseCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_updateInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_upkeepCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDonId(
      newDonId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequest(
      _subscriptionId: PromiseOrValue<BigNumberish>,
      _fulfillGasLimit: PromiseOrValue<BigNumberish>,
      _updateInterval: PromiseOrValue<BigNumberish>,
      requestCBOR: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
