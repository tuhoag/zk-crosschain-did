/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StatusRegistry,
  StatusRegistryInterface,
} from "../../../contracts/StatusRegistry.sol/StatusRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_donId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyArgs",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySource",
    type: "error",
  },
  {
    inputs: [],
    name: "NoInlineSecrets",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyRouterCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "donId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastStatus",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "handleOracleFulfillment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastResponse",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "source",
        type: "string",
      },
      {
        internalType: "enum FunctionsRequest.Location",
        name: "secretsLocation",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "encryptedSecretsReference",
        type: "bytes",
      },
      {
        internalType: "string[]",
        name: "args",
        type: "string[]",
      },
      {
        internalType: "bytes[]",
        name: "bytesArgs",
        type: "bytes[]",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    name: "sendRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "newDonId",
        type: "bytes32",
      },
    ],
    name: "setDonId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001abd38038062001abd833981016040819052620000349162000183565b6001600160a01b0382166080523380600081620000985760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000cb57620000cb81620000d8565b50505060025550620001bf565b336001600160a01b03821603620001325760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200008f565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080604083850312156200019757600080fd5b82516001600160a01b0381168114620001af57600080fd5b6020939093015192949293505050565b6080516118db620001e2600039600081816101980152610a7801526118db6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806379ba509711610081578063b1e217491161005b578063b1e2174914610169578063f2fde38b14610172578063f6ccbe4a1461018557600080fd5b806379ba50971461012f5780638da5cb5b146101375780638dbe7b9d1461015257600080fd5b80633944ea3a116100b25780633944ea3a146100f65780634b0795a81461011457806378ca5de71461011c57600080fd5b80630ca76175146100ce578063231c1619146100e3575b600080fd5b6100e16100dc36600461116a565b61018d565b005b6100e16100f13660046112a5565b61022a565b6100fe61037d565b60405161010b91906113e2565b60405180910390f35b6100fe61040b565b6100e161012a3660046113f5565b610418565b6100e1610425565b6000546040516001600160a01b03909116815260200161010b565b61015b60025481565b60405190815260200161010b565b61015b60035481565b6100e161018036600461140e565b6104e8565b6100fe6104fc565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101ef576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101fa83838361058e565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6102326105ad565b6102736040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6102ba6000808e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879594939250506106099050565b602081018a60028111156102d0576102d0611437565b908160028111156102e3576102e3611437565b8152505088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506080820152851561033c5761033c6103358789611471565b82906106a0565b83156103565761035661034f85876114fe565b82906106ca565b61036c610362826106f4565b8484600254610a73565b600355505050505050505050505050565b6004805461038a90611566565b80601f01602080910402602001604051908101604052809291908181526020018280546103b690611566565b80156104035780601f106103d857610100808354040283529160200191610403565b820191906000526020600020905b8154815290600101906020018083116103e657829003601f168201915b505050505081565b6005805461038a90611566565b6104206105ad565b600255565b6001546001600160a01b031633146104845760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6104f06105ad565b6104f981610b45565b50565b60606004805461050b90611566565b80601f016020809104026020016040519081016040528092919081815260200182805461053790611566565b80156105845780601f1061055957610100808354040283529160200191610584565b820191906000526020600020905b81548152906001019060200180831161056757829003601f168201915b5050505050905090565b600461059a83826115ee565b5060056105a782826115ee565b50505050565b6000546001600160a01b031633146106075760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161047b565b565b8051600003610644576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383600281111561065757610657611437565b9081600281111561066a5761066a611437565b9052506040840182801561068057610680611437565b9081801561069057610690611437565b9052506060909301929092525050565b80516000036106c25760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b80516000036106ec5760405163fe936cb760e01b815260040160405180910390fd5b60c090910152565b60606000610703610100610bfb565b905061074d6040518060400160405280600c81526020017f636f64654c6f636174696f6e000000000000000000000000000000000000000081525082610c1c90919063ffffffff16565b825161076b90600281111561076457610764611437565b8290610c3a565b60408051808201909152600881527f6c616e677561676500000000000000000000000000000000000000000000000060208201526107aa908290610c1c565b60408301516107c190801561076457610764611437565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610800908290610c1c565b6060830151610810908290610c1c565b60a083015151156108bd5760408051808201909152600481527f6172677300000000000000000000000000000000000000000000000000000000602082015261085a908290610c1c565b61086381610c77565b60005b8360a00151518110156108b3576108a38460a00151828151811061088c5761088c6116ae565b602002602001015183610c1c90919063ffffffff16565b6108ac816116da565b9050610866565b506108bd81610c9b565b608083015151156109be576000836020015160028111156108e0576108e0611437565b03610917576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610956908290610c1c565b61096f8360200151600281111561076457610764611437565b60408051808201909152600781527f736563726574730000000000000000000000000000000000000000000000000060208201526109ae908290610c1c565b60808301516109be908290610cb9565b60c08301515115610a6b5760408051808201909152600981527f62797465734172677300000000000000000000000000000000000000000000006020820152610a08908290610c1c565b610a1181610c77565b60005b8360c0015151811015610a6157610a518460c001518281518110610a3a57610a3a6116ae565b602002602001015183610cb990919063ffffffff16565b610a5a816116da565b9050610a14565b50610a6b81610c9b565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610acb9594939291906116f3565b6020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e919061173d565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b336001600160a01b03821603610b9d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161047b565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b610c03611076565b8051610c0f9083610cc6565b5060006020820152919050565b610c298260038351610d40565b8151610c359082610e61565b505050565b8151610c479060c2610e89565b50610c738282604051602001610c5f91815260200190565b604051602081830303815290604052610cb9565b5050565b610c82816004610ef2565b600181602001818151610c959190611756565b90525050565b610ca6816007610ef2565b600181602001818151610c959190611769565b610c298260028351610d40565b604080518082019091526060815260006020820152610ce660208361177c565b15610d0e57610cf660208361177c565b610d01906020611769565b610d0b9083611756565b91505b602080840183905260405180855260008152908184010181811015610d3257600080fd5b604052508290505b92915050565b60178167ffffffffffffffff1611610d675782516105a79060e0600585901b168317610e89565b60ff8167ffffffffffffffff1611610da9578251610d90906018611fe0600586901b1617610e89565b5082516105a79067ffffffffffffffff83166001610f09565b61ffff8167ffffffffffffffff1611610dec578251610dd3906019611fe0600586901b1617610e89565b5082516105a79067ffffffffffffffff83166002610f09565b63ffffffff8167ffffffffffffffff1611610e31578251610e1890601a611fe0600586901b1617610e89565b5082516105a79067ffffffffffffffff83166004610f09565b8251610e4890601b611fe0600586901b1617610e89565b5082516105a79067ffffffffffffffff83166008610f09565b604080518082019091526060815260006020820152610e8283838451610f8e565b9392505050565b6040805180820190915260608152600060208201528251516000610eae826001611756565b905084602001518210610ecf57610ecf85610eca83600261179e565b61105f565b8451602083820101858153508051821115610ee8578181525b5093949350505050565b8151610c3590601f611fe0600585901b1617610e89565b6040805180820190915260608152600060208201528351516000610f2d8285611756565b90508560200151811115610f4a57610f4a86610eca83600261179e565b60006001610f5a86610100611899565b610f649190611769565b90508651828101878319825116178152508051831115610f82578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115610fb157600080fd5b8351516000610fc08483611756565b90508560200151811115610fdd57610fdd86610eca83600261179e565b855180518382016020019160009180851115610ff7578482525b505050602086015b602086106110375780518252611016602083611756565b9150611023602082611756565b9050611030602087611769565b9550610fff565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b815161106b8383610cc6565b506105a78382610e61565b604051806040016040528061109e604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110ea576110ea6110ab565b604052919050565b600067ffffffffffffffff83111561110c5761110c6110ab565b61111f601f8401601f19166020016110c1565b905082815283838301111561113357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261115b57600080fd5b610e82838335602085016110f2565b60008060006060848603121561117f57600080fd5b83359250602084013567ffffffffffffffff8082111561119e57600080fd5b6111aa8783880161114a565b935060408601359150808211156111c057600080fd5b506111cd8682870161114a565b9150509250925092565b60008083601f8401126111e957600080fd5b50813567ffffffffffffffff81111561120157600080fd5b60208301915083602082850101111561121957600080fd5b9250929050565b80356003811061122f57600080fd5b919050565b60008083601f84011261124657600080fd5b50813567ffffffffffffffff81111561125e57600080fd5b6020830191508360208260051b850101111561121957600080fd5b803567ffffffffffffffff8116811461122f57600080fd5b803563ffffffff8116811461122f57600080fd5b600080600080600080600080600080600060e08c8e0312156112c657600080fd5b67ffffffffffffffff808d3511156112dd57600080fd5b6112ea8e8e358f016111d7565b909c509a506112fb60208e01611220565b99508060408e0135111561130e57600080fd5b61131e8e60408f01358f016111d7565b909950975060608d013581101561133457600080fd5b6113448e60608f01358f01611234565b909750955060808d013581101561135a57600080fd5b5061136b8d60808e01358e01611234565b909450925061137c60a08d01611279565b915061138a60c08d01611291565b90509295989b509295989b9093969950565b6000815180845260005b818110156113c2576020818501810151868301820152016113a6565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610e82602083018461139c565b60006020828403121561140757600080fd5b5035919050565b60006020828403121561142057600080fd5b81356001600160a01b0381168114610e8257600080fd5b634e487b7160e01b600052602160045260246000fd5b600067ffffffffffffffff821115611467576114676110ab565b5060051b60200190565b600061148461147f8461144d565b6110c1565b80848252602080830192508560051b8501368111156114a257600080fd5b855b818110156114f257803567ffffffffffffffff8111156114c45760008081fd5b870136601f8201126114d65760008081fd5b6114e43682358684016110f2565b8652509382019382016114a4565b50919695505050505050565b600061150c61147f8461144d565b80848252602080830192508560051b85013681111561152a57600080fd5b855b818110156114f257803567ffffffffffffffff81111561154c5760008081fd5b61155836828a0161114a565b86525093820193820161152c565b600181811c9082168061157a57607f821691505b60208210810361159a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610c3557600081815260208120601f850160051c810160208610156115c75750805b601f850160051c820191505b818110156115e6578281556001016115d3565b505050505050565b815167ffffffffffffffff811115611608576116086110ab565b61161c816116168454611566565b846115a0565b602080601f83116001811461165157600084156116395750858301515b600019600386901b1c1916600185901b1785556115e6565b600085815260208120601f198616915b8281101561168057888601518255948401946001909101908401611661565b508582101561169e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016116ec576116ec6116c4565b5060010190565b67ffffffffffffffff8616815260a06020820152600061171660a083018761139c565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60006020828403121561174f57600080fd5b5051919050565b80820180821115610d3a57610d3a6116c4565b81810381811115610d3a57610d3a6116c4565b60008261179957634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610d3a57610d3a6116c4565b600181815b808511156117f05781600019048211156117d6576117d66116c4565b808516156117e357918102915b93841c93908002906117ba565b509250929050565b60008261180757506001610d3a565b8161181457506000610d3a565b816001811461182a576002811461183457611850565b6001915050610d3a565b60ff841115611845576118456116c4565b50506001821b610d3a565b5060208310610133831016604e8410600b8410161715611873575081810a610d3a565b61187d83836117b5565b8060001904821115611891576118916116c4565b029392505050565b6000610e8283836117f856fea264697066735822122091f359e19cc9fd2d1fbb2c82a8ac58fbdd78682845910ab2ecc734fc20f52e1b64736f6c63430008130033";

type StatusRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StatusRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StatusRegistry__factory extends ContractFactory {
  constructor(...args: StatusRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    _donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StatusRegistry> {
    return super.deploy(
      router,
      _donId,
      overrides || {}
    ) as Promise<StatusRegistry>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    _donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, _donId, overrides || {});
  }
  override attach(address: string): StatusRegistry {
    return super.attach(address) as StatusRegistry;
  }
  override connect(signer: Signer): StatusRegistry__factory {
    return super.connect(signer) as StatusRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StatusRegistryInterface {
    return new utils.Interface(_abi) as StatusRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StatusRegistry {
    return new Contract(address, _abi, signerOrProvider) as StatusRegistry;
  }
}
